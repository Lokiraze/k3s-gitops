#!/usr/bin/env bash

# Wire up the env and validations
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=/dev/null
source "${__dir}/environment.sh"

# Create secrets file
# shellcheck disable=SC2129
cat >"${GENERATED_SECRETS}" <<-EOF
#
# Manifests auto-generated by secrets.sh -- DO NOT EDIT.
#
---
EOF

#
# Helm Secrets
#

# Generate Helm Secrets
for file in "${SECRET_ROOT}"/helm-templates/*.txt; do
    # Get the path and basename of the txt file
    # e.g. "deployments/default/pihole/pihole"
    secret_path="$(dirname "$file")/$(basename -s .txt "$file")"
    # Get the filename without extension
    # e.g. "pihole"
    secret_name=$(basename "${secret_path}")
    # Get the namespace (based on folder path of manifest)
    namespace="$(find ${REPO_ROOT}/cluster -type f -name "${secret_name}.yaml" | awk -F/ '{print $(NF-1)}')"
    echo ${deployment}
    echo "[*] Generating helm secret '${secret_name}' in namespace '${namespace}'..."
    # Create secret
    envsubst <"$file" |
        kubectl -n "${namespace}" create secret generic "${secret_name}-values" \
            --from-file=/dev/stdin --dry-run=client -o json |
        kubeseal --format=yaml --cert="${PUB_CERT}" \
            >>"${GENERATED_SECRETS}"
    echo "---" >>"${GENERATED_SECRETS}"
done

# # Replace stdin with values.yaml
sed -i 's/stdin\:/values.yaml\:/g' "${GENERATED_SECRETS}"

#
# Generic Secrets
#

# shellcheck disable=SC2129
cat >>"${GENERATED_SECRETS}" <<-EOF
#
# Generic Secrets auto-generated by secrets.sh -- DO NOT EDIT.
#
EOF
# nginx basic auth
kubectl create secret generic bitwarden-admin-token \
    --from-literal=token="${BITWARDEN_ADMIN_TOKEN}" \
    --namespace home --dry-run=client -o json |
    kubeseal --format=yaml --cert="${PUB_CERT}" \
        >>"${GENERATED_SECRETS}"
echo "---" >>"${GENERATED_SECRETS}"

# DigitalOcean api key
kubectl create secret generic digitalocean-api-key \
    --from-literal=api-key="${DO_API_KEY}" \
    --namespace cert-manager --dry-run=client -o json |
    kubeseal --format=yaml --cert="${PUB_CERT}"  \
        >>"${GENERATED_SECRETS}"
echo "---" >>"${GENERATED_SECRETS}"

# Remove empty new-lines
sed -i '/^[[:space:]]*$/d' "${GENERATED_SECRETS}"

# Validate Yaml
if ! yq eval "${GENERATED_SECRETS}" >/dev/null 2>&1; then
    echo "Errors in YAML"
    exit 1
fi

exit 0